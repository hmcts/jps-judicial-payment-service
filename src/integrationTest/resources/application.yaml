spring:
  datasource:
    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
    url: jdbc:tc:postgresql:11:///localhost?stringtype=unspecified
  main:
    allow-bean-definition-overriding: true
  application:
    name: Judicial Payment Service
    jackson:
      property-naming-strategy: SNAKE_CASE
  jpa:
    database: postgresql
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
  flyway:
    out-of-order: true
    ignore-missing-migrations: true
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${IDAM_OIDC_URL:https://idam-web-public.aat.platform.hmcts.net}/o
        registration:
          oidc:
            client-id: internal
            client-secret: internal

idam:
  api:
    url: ${IDAM_API_URL:https://idam-api.aat.platform.hmcts.net}
  s2s-auth:
    microservice: jps_judicial_payment_service
    totp_secret: ${IDAM_KEY_JPS_JUDICIAL_PAYMENT_SERVICE:AAAAAAAAAAAAAAAA}
    url: ${S2S_URL:http://localhost:8489}
  s2s-authorised:
    services: ${JPS_PAYMENT_SERVUCE_S2S_AUTHORISED_SERVICES:jps_webapp}
  client:
    id: jps_judicial_payment_service
    scope: openid roles profile
    secret: ${JPS_JUDICIAL_PAYMENT_SERVICE_IDAM_CLIENT_SECRET:AAAAAAAAAAAAAAAA}
    # same for all environments - not used in jps but configured as idam mandates for token generation
    redirect_uri: http://jps-judicial-payment-service/oauth2redirect
  jps:
    system:
      username: jps-system@gmail.com
      password: ${IDAM_JPS_SYSTEM_PASSWORD:}

oidc:
  issuer: ${OIDC_ISSUER:http://fr-am:8080/openam/oauth2/hmcts}

http:
  client:
    max:
      total: ${HTTP_CLIENT_MAX_TOTAL:100}
      client_per_route: ${HTTP_CLIENT_MAX_CLIENT_PER_ROUTE:20}
    seconds:
      idle:
        connection: ${HTTP_CLIENT_SECONDS_IDLE_CONNECTION:120}
    validate:
      after:
        inactivity: ${HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY:2000}
    connection:
      timeout: ${HTTP_CLIENT_CONNECTION_TIMEOUT:30000}
    read:
      timeout: ${HTTP_CLIENT_READ_TIMEOUT:60000}

dbMigration:
  # When true, the app will run DB migration on startup.
  # Otherwise, it will just check if all migrations have been applied (and fail to start if not).
  runOnStartup: ${RUN_DB_MIGRATION_ON_STARTUP:true}

location:
  api:
    url: ${LOCATION_API_URL:http://rd-location-ref-api-aat.service.core-compute-aat.internal}

judicialUsers:
  api:
    url: ${JUDICIAL_USERS_API_URL:http://rd-judicial-api-aat.service.core-compute-aat.internal}

caseworker:
  api:
    url: ${CASEWORKER_API_URL:http://rd-caseworker-ref-api-aat.service.core-compute-aat.internal}
