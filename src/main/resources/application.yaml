server:
  port: 4550

management:
  endpoint:
    health:
      show-details: "always"
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

springdoc:
  packagesToScan: uk.gov.hmcts.reform.jps.controllers

#If you use a database then uncomment below lines and update db properties accordingly
spring:
  main:
    allow-bean-definition-overriding: true
  config:
    import: "optional:configtree:/mnt/secrets/jps/"
  application:
    name: Judicial Payment Service
    jackson:
      property-naming-strategy: SNAKE_CASE
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${JUDICIAL_PAYMENT_SERVICE_DB_HOST:localhost}:${JUDICIAL_PAYMENT_SERVICE_DB_PORT:6432}/${JUDICIAL_PAYMENT_SERVICE_DB_NAME:jps}${JUDICIAL_PAYMENT_SERVICE_DB_OPTIONS:?ssl=disable}
    username: ${JUDICIAL_PAYMENT_SERVICE_DB_USERNAME:postgres}
    password: ${JUDICIAL_PAYMENT_SERVICE_DB_PASSWORD:postgres}
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimumIdle: 2
      maximumPoolSize: 10
      idleTimeout: 10000
      poolName: JPSHikariCP
      maxLifetime: 7200000
      connectionTimeout: 30000
  jpa:
    database: postgresql
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
  flyway:
    out-of-order: true
    ignore-missing-migrations: true

dbMigration:
  # When true, the app will run DB migration on startup.
  # Otherwise, it will just check if all migrations have been applied (and fail to start if not).
  runOnStartup: ${RUN_DB_MIGRATION_ON_STARTUP:true}

location:
  api:
    url: ${LOCATION_API_URL:http://rd-location-ref-api-aat.service.core-compute-aat.internal}

judicialUsers:
  api:
    url: ${JUDICIAL_USERS_API_URL:http://rd-judicial-api-aat.service.core-compute-aat.internal}

caseworker:
  api:
    url: ${CASEWORKER_API_URL:http://rd-caseworker-ref-api-aat.service.core-compute-aat.internal}


idam:
  api:
    url: ${IDAM_API_URL:https://idam-api.aat.platform.hmcts.net}
  s2s-auth:
    microservice: jps_judicial_payment_service
    totp_secret: ${JPS_JUDICIAL_PAYMENT_SERVICE_S2S_SECRET:}
    url: ${IDAM_S2S_AUTH_URL:http://rpe-service-auth-provider-aat.service.core-compute-aat.internal}
  s2s-authorised:
    services: ${JPS_PAYMENT_SERVICE_S2S_AUTHORISED_SERVICES:jps_webapp}
  client:
    id: jps_judicial_payment_service
    scope: openid roles profile
    secret: ${IDAM_JPS_JUDICIAL_PAYMENT_SERVICE_CLIENT_SECRET:}
    # same for all environments - not used in jps but configured as idam mandates for token generation
    redirect_uri: http://jps-judicial-payment-service/oauth2redirect
  jps:
    system:
      username: ${IDAM_JPS_SYSTEM_USERNAME:jps-system@gmail.com}
      password: ${IDAM_JPS_SYSTEM_USERNAME:}
