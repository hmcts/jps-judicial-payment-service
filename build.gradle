plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.4.4'
  id 'org.owasp.dependencycheck' version '8.1.0'
  id 'com.github.ben-manes.versions' version '0.45.0'
  id 'org.sonarqube' version '3.5.0.2730'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
  id 'uk.gov.hmcts.java' version '0.12.28'
  id 'com.github.hmcts.rse-cft-lib' version '0.15.64'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

def versions = [
  junit           : '5.7.2',
  junitPlatform   : '1.7.2',
  lombok          : '1.18.16',
  mapstruct       : '1.4.2.Final',
  reformLogging   : '5.1.7',
  restAssured     : '4.2.1',
  springBoot      : springBoot.class.package.implementationVersion,
  springCloud     : '2020.0.1',
  springfoxSwagger: '3.0.0',
  testcontainers  : '1.15.2',
  netty           : '4.1.68.Final',
  serviceAuthVersion: '3.1.1',
  tomcatEmbedded  : '9.0.69'
]

ext['log4j2.version'] = '2.17.1'
ext['snakeyaml.version'] = '1.33'
ext['jackson.version'] = '2.14.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  cucumberRuntime {
    extendsFrom testImplementation
  }

  cftlibRuntimeClasspath.extendsFrom(runtimeClasspath)
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  generateCucumberReports.enabled = false
  failFast = true
}

task functional() {
  description = "Runs functional tests"
  dependsOn assemble, testClasses
  doFirst {
    generateCucumberReports.enabled = true
    javaexec {
      main = "io.cucumber.core.cli.Main"
      classpath += configurations.cucumberRuntime + sourceSets.functionalTest.output
      args = [
        '--threads', '1',
        '--plugin', "json:${rootDir}/target/cucumber.json",
        '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
        '--tags', '',
        '--glue', 'uk.gov.hmcts.reform.jps', 'src/functionalTest/resources/features'
      ]
    }
  }
  finalizedBy {
    generateCucumberReports {
      doLast{
        delete "${rootDir}/Report for Functional Tests/"
        new File("${rootDir}/Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber-html-reports").renameTo(file("${rootDir}/Report for Functional Tests"))
        logger.quiet("Functional test report moved to ---> file://${buildDir}/reports/tests/functional/overview-features.html")

      }
    }
  }
}

cucumberReports {
  outputDir = file("${rootDir}/target")
  reports = files("${rootDir}/target/cucumber.json")
  notFailingStatuses = ["skipped", "passed"]
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.7.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.54.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonar'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonar {
  properties {
    property "sonar.projectName", "Reform :: jps-judicial-payment-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:jps-judicial-payment-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.19.0"
  testcontainersVersion = '1.17.6'
}

ext['snakeyaml.version'] = '1.33'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceAuthVersion
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'
  implementation group: 'javax.inject', name: 'javax.inject', version: '1'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'

  implementation 'org.mapstruct:mapstruct-jdk8:1.3.1.Final'

  implementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.0.0'
  testImplementation(platform('org.junit:junit-bom:5.9.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.11.1'
  testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.11.1'
  testImplementation group: 'junit', name: 'junit', version: '4.13.2'

  implementation (group: 'org.glassfish.web', name: 'el-impl', version: '2.2.1-b05') {
    exclude group: 'javax.el', module: 'el-api'
  }
  implementation group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'
  implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.1-b06'
  implementation group: 'org.testcontainers', name: 'junit-jupiter', version: testcontainersVersion
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final', 'org.projectlombok:lombok:1.18.16', 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok


  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  cftlibImplementation group: 'org.springframework.boot', name: 'spring-boot-devtools'
  integrationTestImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '3.1.0'
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
  testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
  testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final', 'org.projectlombok:lombok:1.18.16', 'org.projectlombok:lombok-mapstruct-binding:0.2.0'


}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

mainClassName = 'uk.gov.hmcts.reform.jps.Application'

bootJar {
  archiveFileName = "jps-judicial-payment-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

bootWithCCD {
  doFirst {
    // Set this flag to 'true', if you want the CFTLib containers to be recreates each time
    environment "RSE_LIB_CLEAN_BOOT", false
  }

  authMode = uk.gov.hmcts.rse.AuthMode.Local
  // TODO: update when we have db connections and authorised services
  environment("DATA_STORE_S2S_AUTHORISED_SERVICES", "ccd_gw,ccd_gateway,ccd_data,ccd_next_hearing_date_updater")
  environment("RSE_LIB_S2S_PORT", 4502)
  environment("RSE_LIB_ADDITIONAL_DATABASES", "jps");
  environment("CFT_HEARING_SERVICE_DB_USERNAME", "postgres")
  environment("CFT_HEARING_SERVICE_DB_PASSWORD", "postgres")
  environment("CFT_HEARING_SERVICE_DB_PORT", "6432")
  environment("CFT_HEARING_SERVICE_DB_NAME", "jps")
  environment("S2S_URL", "http://localhost:8489")
}

void loadEnvFile(Task execTask, String envFilePath) {
  if (file(envFilePath).exists()) {
    logger.quiet("Loading environment variables from '${envFilePath}'")

    file(envFilePath).readLines().each() {
      if (it.startsWith('# ')) {
        if (it.startsWith('# WARNING')) {
          // copy warning to console
          logger.quiet(it)
        }
      } else if (!it.isEmpty()) {
        def (key, value) = it.tokenize('=')
        execTask.environment(key, value)
      }
    }
  } else {
    logger.quiet("Skipping load of environment variables from '${envFilePath}' as file not found.")
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
